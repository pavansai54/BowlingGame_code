#include <iostream>
#include <vector>
using namespace std;

class Bowling_game {
    vector<int> rolls;
    int currentRoll;

    bool is_Strike(int rollIndex) {
        return rolls[rollIndex] == 10;
    }

    bool is_Spare(int rollIndex) {
        return rolls[rollIndex] + rolls[rollIndex + 1] == 10;
    }

    int strikeBonus(int rollIndex) {
        return rolls[rollIndex + 1] + rolls[rollIndex + 2];
    }

    int spareBonus(int rollIndex) {
        return rolls[rollIndex + 2];
    }

    int sumOfBallsInFrame(int rollIndex) {
        return rolls[rollIndex] + rolls[rollIndex + 1];
    }

public:
    Bowling_game() : rolls(21, 0), currentRoll(0) {}

    void roll(int pins) {
        rolls[currentRoll++] = pins;
    }

    int score() {
        int total_Score = 0;
        int rollIndex = 0;
        for (int frame = 0; frame < 10; ++frame) {
            if (is_Strike(rollIndex)) {
                total_Score += 10 + strikeBonus(rollIndex);
                rollIndex++;
            } else if (is_Spare(rollIndex)) {
                total_Score += 10 + spareBonus(rollIndex);
                rollIndex += 2;
            } else {
                total_Score += sumOfBallsInFrame(rollIndex);
                rollIndex += 2;
            }
        }
        return total_Score;
    }

};

int main() {
    Bowling_game Ball_game;
    // Example rolls
    Ball_game.roll(10); 
    Ball_game.roll(7);
    Ball_game.roll(3);  
    Ball_game.roll(9);
    Ball_game.roll(0);
    Ball_game.roll(10); 
    Ball_game.roll(0);
    Ball_game.roll(8);
    Ball_game.roll(8);
    Ball_game.roll(2); 
    Ball_game.roll(0);
    Ball_game.roll(6);
    Ball_game.roll(10); 
    Ball_game.roll(10); 
    Ball_game.roll(10); 
    Ball_game.roll(8);
    Ball_game.roll(1);

    std::cout << "Total Score: " << Ball_game.score() << std::endl;
    return 0;
}
